#!/bin/bash - 
#===============================================================================
#
#          FILE: run.sh
# 
#         USAGE: ./run.sh 
# 
#   DESCRIPTION: Wrapper script to read in all necessary settings, set up an
#                execution environment and run SPaCEL
# 
#       OPTIONS: A property file containing settings to be evaluated
#===============================================================================

set -o nounset                              # Treat unset variables as an error

# runtime settings
smlb_step="train"
# 0 --> off; 1 --> DEBUG; 2 --> TRACE
smlb_log_level=1

cd "$(dirname "$0")"
program_dir="$(pwd)"

number_of_workers=6


############################################################
# Source the commons file to make a bunch of functions available
. ./common.sh


############################################################
# Read in the main configuration file
read_property_file "$1"


############################################################
# Read task config
# TODO: PW: really necessary? Documented nowhere


############################################################
# Read learning problem-specific configuration
lp_specific_config_file="../../$learning_tasks_dir_name/$smlb_learningtask/$kr_lang_dir_name/$learning_problems_dir_name/$smlb_learningproblem/$lp_specific_condif_file_name"
if [ -f "$lp_specific_config_file" ]
then
    debug "Found $lp_specific_config_file. Will try read it."
    read_lp_ini_file "$lp_specific_config_file"
else
    debug "No learning problem-specific file found under $lp_specific_config_file"
fi


############################################################
# Adjust max. execution time based on the loading time (if known)

# if maxExecutionTimeInSeconds is not set in the settings
if [ -z "${smlb_settings__algorithm__maxExecutionTimeInSeconds+'foo'}" ]
then
    # if smlb_loadingTime is not set
    if [ -z "${smlb_loadingTime+'foo'}" ]
    then
        smlb_loadingTime=200
    fi
    
    new_maxExecutionTime="$((smlb_maxExecutionTime-smlb_loadingTime))"
    # Only assign the resulting max. execution time if it is greater than 0!
    # If it is 0 the DL-Learner will run forever.
    if [ "$new_maxExecutionTime" -gt 0 ]
    then
        smlb_maxExecutionTime=$new_maxExecutionTime
    fi
fi


############################################################
# Write out gathered settings
tmpdir="$smlb_filename__workdir"
config_file="$tmpdir"/run.conf
write_config "$config_file"


############################################################
# Add some additional settings

# only set the (calculated) maxExecutionTimeInSeconds if was not set
# explicitly in the learning system settings
if [ -z "${smlb_settings__algorithm__maxExecutionTimeInSeconds+'foo'}" ]
then
    add_to_config "$algorithm_const.maxExecutionTimeInSeconds = $smlb_maxExecutionTime" "$config_file"
fi

# set default algorithm if no algorithm was set
if [ $algorithm_is_set -eq 0 ]
then
    add_to_config "$algorithm_const.type = \"org.dllearner.algorithms.ParCELEx.ParCELearnerExV2\"" "$config_file"
fi

# set knowledge source
sources=$(add_knowledge_sources_to_config_and_get_sources "$smlb_learningtask" "$config_file")

# set reasoner component if no reasoner component was set
if [ $reasoner_is_set -eq 0 ]
then
    add_to_config "$reasoner_const.type = \"fast instance checker\"" "$config_file"
fi

# add number of workers
add_to_config "$algorithm_const.numberOfWorkers = $number_of_workers" "$config_file"

# set splitter
add_to_config "$algorithm_const.splitter = splitter" "$config_file"

# add double splitter v1
add_to_config "splitter.type = \"org.dllearner.algorithms.ParCEL.split.ParCELDoubleSplitterV1\"" "$config_file"

# add knowledge sources for reasoner component
add_to_config "$reasoner_const.sources = { $sources }" "$config_file"

# set learning problem if no learning problem was set
if [ $lp_is_set -eq 0 ]
then
    add_to_config "$lp_const.type = \"org.dllearner.algorithms.ParCEL.ParCELPosNegLP\"" "$config_file"
fi

# load positive examples
add_to_config "$lp_const.positiveExamples = {" "$config_file"
add_to_config "$(read_examples $smlb_filename__pos)" "$config_file"
add_to_config "}" "$config_file"

# load negative examples
add_to_config "$lp_const.negativeExamples = {" "$config_file"
add_to_config "$(read_examples $smlb_filename__neg)" "$config_file"
add_to_config "}" "$config_file"

java -jar parcel-cli.jar "$config_file" | tee "$tmpdir"/output.log

# parse the best result
grep '^#RESULT# ' "$tmpdir"/output.log | sed -e 's,^#RESULT# ,,' > "$smlb_filename__output"
