[main]
; Descriptions taken from
;
; Muggleton, Firth: 'Relational Rule Induction with CPROGOL4.4: A Tutorial
; Introduction', 2001
;
; and the Progol source code.
; The shorter the description the less likely it seems that the considered
; setting is meant to be set by a user.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; settings

; This is the maximum number of atoms in the body of any hypothesised clause.
; Increasing this value potentially increases the maximum clause search size
; exponentially.
; (Default=4)
;c=4

; Compression threshold
; (Default=0)
;compress=0

; This is a bound on the number of iterations carried out in the construction
; of bottom clause. Each iteration introduces new variables based on the
; instantiation of output terms associated with modeb declarations.
; (Default=3)
;i=3

; This is the maximum depth of any proof carried out by the interpreter, i.e.
; the maximum stack depth before backtracking occurs. When the limit is
; exceeded a warning of the form [WARNING: depth-bound failure - use set(h,..)]
; is issued. This is not an error. It is necessary to have such failures when
; learning recursive rules.
; (Default=30)
;h=30

; Example inflation.
; (Default=101)
;inflate=101

; This is a bound on the number of search nodes expanded in the search of the
; lattice of clauses. According to sample complexity results this value should
; be set to around 1.6 times the number of examples in the training set in
; order to minimize the expected error.
; (Default=200)
;nodes=20000

; Amount of noise allowed
; (Default=0)
;noise=2

; This is the maximum depth of resolutions (unifications) allowed in any proof
; carried out by the interpreter. Once this limit is exceeded the entire proof
; is failed (unlike h in which backtracking occurs when the bound is reached)
; and the warning [WARNING: depth-bound failure - use set(r,..)] is issued.
; Again this is not an error. It is necessary to have such failures when
; learning recursive rules.
; (Default=400)
;r=400

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; flags

; Use examples to condition stochastic logic program associated with a
; particular predicate.
; (Default=ON)
;condition=ON

; Enables/disables cover-testing
; (Default=ON)
;cover=ON      

; Enables/disables full pruning of the search
; (Default=ON)
;full_pruning=ON

; Enable/disable memoing for search
; (Default=ON)
;memoing=ON

; Enable/disable learning from positive examples only
; (Default=OFF)
;posonly=OFF

; Enables/disables reductive language constraint
; (Default=OFF)
;reductive=OFF

; Enables/disables hypothesis search
; (Default=OFF)
;searching=OFF

; Enables/disables variable splitting
; (Default=ON)
;splitting=OFF

